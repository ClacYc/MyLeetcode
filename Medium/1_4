# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


# print the binary tree as a Chinese chractor "ä¹‹"'s type . 


class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:return []
        i = -1
        res, deque = [], collections.deque()
        deque.append(root)
        while deque:
            i += 1
            tem = collections.deque()
            for j in range(len(deque)):
                node = deque.popleft()
                if i%2:tem.appendleft(node.val)
                else:tem.append(node.val)
                if node.left:deque.append(node.left)
                if node.right:deque.append(node.right)
            res.append(list(tem))
        return res
        
        
        
        
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:return []
        res, deque = [], collections.deque([root])
        while deque:
            tem = []
            for j in range(len(deque)):
                node = deque.popleft()
                tem.append(node.val)
                if node.left:deque.append(node.left)
                if node.right:deque.append(node.right)
            res.append(tem[::-1] if len(res)%2 else tem)
        return res
                


        
        
        
  
                
